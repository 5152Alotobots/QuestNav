name: Build QuestNav App
on:
  workflow_call:
    inputs:
      versionYear:
        description: 'Current FRC year'
        required: false
        type: string
      versionMajor:
        description: 'Major version'
        required: false
        type: string
      versionMinor:
        description: 'Minor version'
        required: false
        type: string
      versionPatch:
        description: 'Patch version'
        required: false
        type: string
      versionType:
        description: 'Type of version'
        required: false
        type: string
      devBuild:
        type: boolean
        default: true
        description: "Build a development variant"
    secrets:
      UNITY_LICENSE:
        description: 'Unity license'
        required: true
      UNITY_EMAIL:
        description: 'Unity email'
        required: true
      UNITY_PASSWORD:
        description: 'Unity password'
        required: true

jobs:
  build-unity:
    runs-on: [self-hosted, Windows]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute QUESTNAV versioning
        id: set-version
        shell: pwsh
        run: |
          $commitHash  = (git rev-parse --short=7 HEAD).Trim()
          $commitCount = [int](git rev-list --count HEAD)
          $version     = "$commitHash-dev"
          $code        = 1000000 + $commitCount
          $isDev       = ("${{ inputs.devBuild }}".ToLower() -eq "true")

          # Step outputs
          "QUESTNAV_VERSION=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          "QUESTNAV_VERSION_CODE=$code" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          if ($isDev) { "QUESTNAV_DEVELOPMENT_BUILD=1" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8 }

          # Export to env for subsequent steps
          "QUESTNAV_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "QUESTNAV_VERSION_CODE=$code" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          if ($isDev) { "QUESTNAV_DEVELOPMENT_BUILD=1" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8 }

      - name: Resolve Unity.exe
        id: unity-path
        shell: pwsh
        run: |
          function Get-UnityVersionFromWorkflow([string]$ymlPath) {
            if (-not (Test-Path $ymlPath)) { return $null }
            $content = Get-Content -Raw -Path $ymlPath
            $m = [regex]::Match($content, "unityVersion:\s*([0-9\.a-zA-Z\-]+)")
            if ($m.Success) { return $m.Groups[1].Value } else { return $null }
          }

          $unity = $env:UNITY_EDITOR_PATH
          if (-not $unity) {
            $wfVersion = Get-UnityVersionFromWorkflow ".github/workflows/build-questnav-apk.yml"
            if ($wfVersion) {
              $candidate = "C:\Program Files\Unity\Hub\Editor\$wfVersion\Editor\Unity.exe"
              if (Test-Path $candidate) { $unity = $candidate }
            }
          }
          if (-not $unity) { $unity = "C:\Program Files\Unity\Hub\Editor\6000.0.58f1\Editor\Unity.exe" }
          if (-not (Test-Path $unity)) { throw "Unity Editor not found at: $unity" }
          "UNITY_EDITOR_PATH=$unity" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Clean Unity artifacts (fresh build)
        shell: pwsh
        run: |
          $proj = "unity"
          @('Library','Temp','obj','Logs','build') | ForEach-Object {
            $p = Join-Path $proj $_
            if (Test-Path $p) {
              try { Remove-Item -Recurse -Force -LiteralPath $p } catch { Write-Warning "Failed to remove $p: $($_.Exception.Message)" }
            }
          }

      - name: NuGetForUnity restore (only if present)
        shell: pwsh
        run: |
          $nugetConfig = "unity\Packages\NuGet.config"
          if (Test-Path $nugetConfig) {
            Write-Host "NuGetForUnity detected. Restoring packages..."
            try { dotnet tool install --global NuGetForUnity.Cli | Out-Null } catch { Write-Warning $_.Exception.Message }
            $toolPath = Join-Path $env:USERPROFILE ".dotnet\tools"
            $nugetCli = Join-Path $toolPath "nugetforunity.exe"
            if (Test-Path $nugetCli) { & $nugetCli restore unity } else { nugetforunity restore unity }
          } else {
            Write-Host "NuGetForUnity not detected; skipping restore."
          }

      - name: Build with Unity (batchmode, no Docker)
        id: unity-build
        shell: pwsh
        env:
          OVR_DISABLE_PROJECT_SETUP: "1"
        run: |
          $proj    = "unity"
          $unity   = $env:UNITY_EDITOR_PATH
          $logPath = Join-Path $PWD "local-unity-build.log"
          if (Test-Path $logPath) { Remove-Item $logPath -Force }
          $null = New-Item -ItemType File -Path $logPath -Force

          # Exact flags from your script:
          & "$unity" `
            -batchmode `
            -nographics `
            -quit `
            -projectPath "$proj" `
            -executeMethod "CI.Build.PerformAndroid" `
            -logFile "$logPath"

          $exit = $LASTEXITCODE
          Write-Host "---- Tail of Unity log ----"
          if (Test-Path $logPath) { Get-Content $logPath -Tail 200 } else { Write-Warning "Unity log file not found at $logPath" }
          if ($exit -ne 0) { throw "Unity build failed with exit code $exit. See $logPath" }

          # Wait for APK to appear (Unity process may linger while writing files)
          $apk = Join-Path $proj "build/Android/QuestNav-local.apk"
          $deadline = (Get-Date).AddMinutes(60)
          while (-not (Test-Path $apk) -and (Get-Date) -lt $deadline) {
            $u = Get-Process -Name Unity -ErrorAction SilentlyContinue
            if (-not $u) { break }
            Start-Sleep -Seconds 10
          }

          if (-not (Test-Path $apk)) { throw "Expected APK not found at $apk. See $logPath" }
          "APK_PATH=$apk" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Compute artifact name
        id: artifact
        shell: pwsh
        run: |
          $name = "QuestNav-${{ steps.set-version.outputs.QUESTNAV_VERSION }}-${{ steps.set-version.outputs.QUESTNAV_VERSION_CODE }}"
          if ("${{ steps.set-version.outputs.QUESTNAV_DEVELOPMENT_BUILD }}") { $name = "$name-dev" }
          "ARTIFACT_NAME=$name" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.ARTIFACT_NAME }}
          path: ${{ steps.unity-build.outputs.APK_PATH }}
          if-no-files-found: error

      - name: Upload Unity build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unity-build-log-${{ steps.set-version.outputs.QUESTNAV_VERSION }}
          path: local-unity-build.log
          retention-days: 7

      - name: Preserve XML Documentation
        shell: pwsh
        run: |
          Write-Host "Preserving XML documentation file for DocFX..."
          $xmlPath = "unity/Library/ScriptAssemblies/QuestNav.xml"
          if (Test-Path $xmlPath) {
            Write-Host "Found QuestNav.xml, copying to persistent location..."
            New-Item -ItemType Directory -Force -Path "unity/DocFX/preserved-xml" | Out-Null
            Copy-Item $xmlPath "unity/DocFX/preserved-xml/QuestNav.xml" -Force
            Write-Host "XML documentation preserved at unity/DocFX/preserved-xml/QuestNav.xml"
            Get-ChildItem "unity/DocFX/preserved-xml/" | Format-Table -AutoSize
          }
          else {
            Write-Warning "QuestNav.xml not found at $xmlPath"
            Write-Host "Available files in ScriptAssemblies:"
            Get-ChildItem "unity/Library/ScriptAssemblies/" -File | Where-Object { $_.Extension -in '.xml','.dll' } | Format-Table -AutoSize
          }

      - name: Upload XML Documentation Artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: questnav-xml-docs-${{ steps.set-version.outputs.QUESTNAV_VERSION }}
          path: unity/DocFX/preserved-xml/QuestNav.xml
          retention-days: 30

  # Call DocFX workflow after successful Unity build
  build-docfx:
    name: Generate C# API Documentation
    needs: build-unity
    if: success()
    uses: ./.github/workflows/build-docfx-api.yml
    with:
      unity-build-completed: true
    permissions:
      contents: write
      pull-requests: write

  # Call Javadoc workflow after successful Unity build
  build-javadoc:
    name: Generate Java API Documentation
    needs: build-unity
    if: success()
    uses: ./.github/workflows/build-javadoc-api.yml
    with:
      unity-build-completed: true
    permissions:
      contents: write
      pull-requests: write